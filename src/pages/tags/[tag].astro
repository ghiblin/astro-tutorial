---
import type { GetStaticPaths, GetStaticPathsResult, MarkdownInstance } from "astro";
import BaseLayout from "../../layouts/base-layout.astro";
import BlogPost from "../../components/blog-post.astro";

export const getStaticPaths = (async () => {  
  const allPosts: MarkdownInstance<Record<string, any>>[] = await Astro.glob('../posts/*.md');

  const uniqueTags = [...new Set(allPosts.map(post => post.frontmatter.tags).flat())]

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter(post => post.frontmatter.tags.includes(tag))
    return {
      params: { tag },
      props: {posts: filteredPosts }    
    } satisfies GetStaticPathsResult[number]
  })
})

interface Props {
  posts: MarkdownInstance<Record<string, any>>[];
}

const { tag } = Astro.params
const { posts } = Astro.props
---
<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    {posts.map((post) => <BlogPost url={post.url!} title={post.frontmatter.title} />)}
  </ul>
</BaseLayout>
